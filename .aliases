#!/bin/zsh
#
# .aliases is sourced by .zshrc and contains all aliases.

alias ..='cd ..'
alias cd..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'

alias lt='ls -lt'
alias lrt='ls -lrt'
alias la='ls -A'
alias llh='ls -lh'
alias lh='llh'
alias lla='ls -lA'
alias l1='ls -1'
alias l1a='ls -1A'

# Emacs
alias emacs='emacs-24.3' 
alias e='emacs &'

# Screen
alias screenr='screen -r'
alias screenls='screen -ls'

# Matlab
alias matlab='matlab_R2017b'
alias ml='matlab -nosplash &'
alias mln='matlab -nosplash -nodesktop -softwareopengl'
alias mlscreen='matlab -nosplash -nodesktop -softwareopengl -display 0.0'
alias mlnojvm='matlab -nosplash -nodesktop -nojvm -softwareopengl'
alias mlnosoftgl='matlab -nosplash -nodesktop -nosoftwareopengl -nojvm'

# GPFS directories
alias cdscratch='cd /gpfs/petra3/scratch/moosmanj'
alias cdsynchroload='cd /asap3/petra3/gpfs/common/p05/jm/synchroload'
alias cdsynchroload2016nov='cd /asap3/petra3/gpfs/p05/2016/data/11001978'
alias cdsynchroload2016commDiana='cd /asap3/petra3/gpfs/p05/2016/data/11002518/processed/synchroload'
alias cdsynchroload2017may='cd /asap3/petra3/gpfs/p05/2017/data/11003950'
alias cdsynchroload2017oct='cd /asap3/petra3/gpfs/p05/2017/data/11003440'
alias cdsynchroload2017nov1='cd /asap3/petra3/gpfs/p05/2017/data/11003773'
alias cdsynchroload2017nov2='cd /asap3/petra3/gpfs/p05/2017/data/11003288'
alias cdcommissioningP05='cd /asap3/petra3/gpfs/p05/2016/commissioning'
alias cdp05='cd /asap3/petra3/gpfs/p05'
alias cdp05common='cd /asap3/petra3/gpfs/common/p05/jm'
alias com='cdp05common'
alias cdscripts='cd /asap3/petra3/gpfs/common/p05/jm'
alias cdmatlab='cd /asap3/petra3/gpfs/common/p05/jm/matlab'
alias cdmatlabp05='cd /asap3/petra3/gpfs/common/p05/jm/matlab/experiments/p05'
alias cdmatlabdata='cd /asap3/petra3/gpfs/common/p05/jm/matlab/experiments/p05/data/moosmanj'
IDL_PATH='/asap3/petra3/gpfs/common/p05/jm/idl'
alias cdidl='cd $IDL_PATH'
alias cdidlreco='cd $IDL_PATH/reco_scripts_juh_test'
alias cdinvivo2016='cd /asap3/petra3/gpfs/p05/2016/data/11001994'
alias cdinvivo2017nov1='cd /asap3/petra3/gpfs/p05/2017/data/11003656'
alias cdinvivo2017nov2='cd /asap3/petra3/gpfs/p05/2017/data/11003527'
alias cdxenopus='cd /asap3/petra3/gpfs/p05/2017/data/11003288/processed/xenopus'
alias cdastra='cd /asap3/petra3/gpfs/common/p05/astra'

# Python
alias pipInstall='pip install --user'
alias pip='$HOME/.local/bin/pip'
alias pip3='$HOME/.local/bin/pip3'

# PyCharm
function installPyCharm(){
    
    # Arguments and variables
    local VERSION=$1
    local INSTALLDIR=$2
    local SYMLINK=$3
    local LINKDIR=$4
    if [ -z "${2}" ]; then
	INSTALLDIR=$HOME/pycharm/
    fi
    if [ -z "${3}" ]; then
	SYMLINK=pycharm
    fi
    if [ -z "${4}" ]; then
	LINKDIR=/asap3/petra3/gpfs/common/p05/jm/bin/
    fi
    
    # Usage
    if [ -z "${1}" ]; then
	echo -e USAGE: installPyCharm VERSION INSTALLDIR SYMLINKNAME SYMLINKDIR \(DEFAULT: \$1 $INSTALLDIR $SYMLINK $LINKDIR\);
	    return
    fi
    
    local NAME=pycharm-community-$VERSION.tar.gz 
    local PYCHARM=${NAME%.tar.gz}    

    # Download from jetbrains
    local FILE=$HOME/Downloads/$NAME
    local URL=https://download.jetbrains.com/python/$FILE
    if [ -e $FILE ]
    then
	echo -e Not downloading. File exists: $FILE
    else
	echo -e Downloading pycharm version $VERSION from $URL
	wget $URL
    fi

    # Extract to standard location
    echo -e Unpack $FILE to $INSTALLDIR:
    tar xfz $FILE --directory $INSTALLDIR
    
    # Remove symbolic link
    if [ -e $PYCHARM_LINK ]
    then
	echo -e Remove symbolic link $PYCHARM_LINK to
	readlink $PYCHARM_LINK
	rm $PYCHARM_LINK
    fi
    
    # Create new symbolic link
    local PYCHARM_LINK=$LINKDIR$SYMLINK
    local LOC=$INSTALLDIR/$PYCHARM/bin/pycharm.sh
    echo -e Create symbolic link $LINK to $LOC:
    ln -s  $LOC $LINK
    readlink $LINKDIR$SYMLINK
}


# source
alias sourcealiases='source $HOME/.aliases'
alias sourcezshr='source $HOME/.zshrc'

# edit
#alias editaliases='emacs -nw $HOME/.aliases'
alias editzshrc='emacs -nw $HOME/.zshrc'
alias editzshrcw='emacs $HOME/.zshrc'
alias editemacs='emacs -nw $HOME/.emacs'
function editaliases {
	 local ALIASES=$HOME/.aliases
	 emacs -nw $ALIASES
	 source $ALIASES
}
alias editgit='emacs -nw $HOME/.gitconfig'

# environment variables
alias echoshell='echo $0'
function echos {
	 echo -e '\nHOME:' $HOME
	 echo -e 'HOST:' $HOST
	 echo -e 'SHELL:' $SHELL
	 echo -e 'PS1:' $PS1
	 echo -e 'TZ:' $TZ
	 echo -e 'PATH:' $PATH
	 echo -e 'LD_LIBRARY_PATH:' $LD_LIBRARY_PATH
	 echo -e 'PYTHONPATH:' $PYTHONPATH
	 echo -e 'MATLABPATH:' $MATLABPATH
	 echo -e 'CUDA_PATH:' $CUDA_PATH
	 echo -e 'ASTRA_HOME:' $ASTRA_HOME
	 echo -e '\n'
}


# print processes matching PATTERN
# alias psgrep='ps -eo pid,user,ni,%cpu,%mem,time,etime,start,comm | grep -e PID -e'
function psgrep() 
{
    echo 'ps -eo pid,user,ni,%cpu,%mem,time,etime,start,comm | grep -e COMMAND -i -e $1'
    ps -eo pid,user,ni,%cpu,%mem,time,etime,start,comm | grep -e COMMAND -i -e $1
}

# IDL
alias idl='idl_8.6'
alias idlde='idlde_8.6'

# ImageJ
alias imagej='/asap3/petra3/gpfs/common/p05/jm/imagej/ImageJ.app/ImageJ-linux64 --no-splash -Xss2m --'
alias ij='imagej &'
alias ijmacros='cd /asap3/petra3/gpfs/common/p05/jm/imagej/macros'
function ij_open_image_sequence {
	filename=$(ls *00001.tif | head -1)
	echo -e '\n filename: ' $filename
	filename=$PWD/$filename
	echo -e '\n filename: ' $filename
	args="open=[$filename] file=tif sort use"
	echo -e '\n args: ' $args

	imagej -run "Image Sequence..." $args
}
alias ijsequ='ij_open_image_sequence'

# Fiji
alias fiji='/asap3/petra3/gpfs/common/p05/jm/fiji/Fiji.app/ImageJ-linux64 --no-splash -Xss2m --'
alias fj='fiji &'
function fiji_open_image_sequence {
	filename=$(ls *00001.tif | head -1)
	echo -e '\n filename: ' $filename
	filename=$PWD/$filename
	echo -e '\n filename: ' $filename
	args="open=[$filename] file=tif sort use"
	echo -e '\n args: ' $args

	fiji -run "Image Sequence..." $args
}
alias fjsequ='fiji_open_image_sequence'

function fjtif {    
    fiji -macro /asap3/petra3/gpfs/common/p05/jm/imagej/macros/open_image_sequence.ijm
}

#############################
# convenience cd functions
# save PWD to file
function saveworkingdirectory {
	 echo $PWD > $HOME/.savedworkingdirectory
	 echo $PWD | tr -d '\n' | xclip -sel clipboard
	 echo "Working directory saved. Return with: back"
	# echo "Return to saved directory with one of the following equivalent command:\ncdswd gotoswd gotosavedworkingdirectory"

}
alias swd='saveworkingdirectory'
alias savewd='saveworkingdirectory'
alias save='saveworkingdirectory'

# go to saved working directory
function gotosavedworkingdirectory {
	 local swd=$(<$HOME/.savedworkingdirectory)
	 cd $swd
}
alias gotoswd='gotosavedworkingdirectory'
alias cdswd='gotosavedworkingdirectory'
alias back='gotosavedworkingdirectory'

# go to last reconstruction 
function gotolastreco {
	 local reco_path=$(<$MATLAB_USER_PATH/experiments/p05/path_to_latest_reco)
	 cd $reco_path
	 echo $reco_path | tr -d '\n' | xclip -sel clipboard	 
}
alias cdlastreco='gotolastreco'
alias cdreco='gotolastreco'
alias reco='gotolastreco'

# go to last processed scan
function gotolastscan {
	 local scan_path=$(<$MATLAB_USER_PATH/experiments/p05/path_to_latest_scan)
	 cd $scan_path
	 echo $scan_path | tr -d '\n' | xclip -sel clipboard	 
}
alias cdlastscan='gotolastscan'
alias cdscan='gotolastscan'
alias scan='gotolastscan'

# go to last processed raw
function gotolastraw {
	 local raw_path=$(<$MATLAB_USER_PATH/experiments/p05/path_to_latest_raw)
	 cd $raw_path
	 echo $raw_path | tr -d '\n' | xclip -sel clipboard	 
}
alias cdlastraw='gotolastraw'
alias cdraw='gotolastraw'
alias raw='gotolastraw'
#############################

# top of user
alias topm='top -u $USER'

# PETRA III Storage cd between raw and processed
function cdother {

	 local WD=$PWD
	 local OTHER=${WD//raw/processed}
	 
	 if [[ $OTHER = $WD ]]
	 then
	    local OTHER=${WD//processed/raw}
	    cd $OTHER
	 else
	    cd $OTHER
	 fi
}
alias other='cdother'

# Search PATTERN within files under current directory and subfolder
function findinfiles {
	 grep -nrwi . -e $1
}

function grep_in_reco_log {
 
    grep -Hi $1 ./*/reco/reco.log
}

function grep_in_raw_log {
 
    grep -Hi $1 ./*/*scan.log
}


# disk usage
alias dus='du -s'
alias duhs='du -hs'
alias du1='du -hd1'
alias du2='du -hd2'

# ASTRA config
ASTRA_HOME=/asap3/petra3/gpfs/common/p05/astra          
alias astra_conf_18='$ASTRA_HOME/astra_conf_18'

# feh image viewer
alias feh='/asap3/petra3/gpfs/common/p05/jm/bin/feh'

# SSH
alias maxfsg='ssh moosmanj@max-fsg'
alias fsg='maxfsg'
alias maxfsc='ssh moosmanj@max-fsc'
alias fsc='maxfsc'
alias maxhzg='ssh moosmanj@max-hzgg001'
alias hzg='maxhzg'
alias maxnova='ssh moosmanj@max-nova'
alias nova='maxnova'

alias fsgnox='ssh -x moosmanj@max-fsg'
alias fscnox='ssh -x moosmanj@max-fsc'
alias hzgnox='ssh -x moosmanj@max-hzgg001'
alias novanox='ssh -x moosmanj@max-nova'

alias maxnovac='ssh -CXY moosmanj@max-nova'
alias novac='maxnovac'

# AVIZO
function module_load_avizo {
    module load maxwell
    module load avizo
    Avizo &
}

# Tensorflow
function module_load_tensorflow_cpu {    
    module load maxwell
    module load anaconda/3
    module load tf14/CPU-py3
    module list
    source activate tf14c
    echo Acitvating virtual conda environment activated:
    conda info --envs | grep "*"
    echo Starting pycharm.
    pycharm &
}
function module_load_tensorflow_gpu {
    module load maxwell
    module load anaconda/3
    module load tf14/GPU-py3
    module list
    source activate tf14g
    echo Acitvating virtual conda environment activated:
    conda info --envs | grep "*"
    echo Starting pycharm.
    pycharm &
}

# xclip
alias test_xclip_primary='echo ''test primary'' | xclip -sel primary'
alias test_xclip_secondary='echo ''test  secondary '' | xclip -sel  secondary XA_SECONDARY'
alias test_xclip_clipboard='echo ''test clipboard '' | xclip -sel clipboard'
function echo_clipboard {
    echo 'test primary' | xclip -sel primary
    echo 'test secondary' | xclip -sel secondary
    echo 'test clipboard' | xclip -sel clipboard
    echo -e '\nXA_PRIMARY:' $XA_PRIMARY
    echo -e 'XA_SECONDARY:' $XA_SECONDARY
    echo -e 'XA_PRIMARY:' $XA_PRIMARY '\n'
}


function list_folders_and_filecount (){

    local pattern=$1
    if [ -z "${1}" ]; then
	pattern=.
    fi

    
    find $pattern -type d -print0 | while read -d '' -r dir
    do
	files=("$dir"/*)
	printf "%5d files in directory %s\n" "${#files[@]}" "$dir"
    done
}

function list_folders_and_filecount2 (){

    local pattern=$1
    if [ -z "${1}" ]; then
	pattern=.
    fi

    find $pattern -maxdepth 1 -type d -print0 | while read -d '' -r dir; do num=$(find "$dir" -ls | wc -l); printf "%5d files in  %s\n" "$num" "$dir"; done | sort -rn -k1
}

function count_files {
    ls -l | wc -l
}
